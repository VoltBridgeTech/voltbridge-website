import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, ArrowRight, ArrowLeft, Loader2, CheckCircle, Zap, Lock, ShieldCheck, ChevronRight } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";

interface FormData {
  postcode: string;
  monthlySpend: string;
  contractStatus: string;
  contractEndDate?: Date;
  firstName: string;
  lastName: string;
  email: string;
  whatsapp: string;
}

const ContactForm = () => {
  const [step, setStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    postcode: "",
    monthlySpend: "",
    contractStatus: "",
    firstName: "",
    lastName: "",
    email: "",
    whatsapp: ""
  });
  const { toast } = useToast();

  // Animation variants with proper TypeScript types
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        when: "beforeChildren",
        staggerChildren: 0.1,
        duration: 0.5,
      },
    },
  } as const;

  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { 
        type: "spring" as const, 
        stiffness: 300, 
        damping: 24 
      },
    },
  } as const;

  const formTransition = {
    type: "spring",
    damping: 30,
    stiffness: 300,
  };

  // Auto-save to localStorage
  useEffect(() => {
    const saved = localStorage.getItem('voltbridge-form');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setFormData(parsed);
        setStep(parsed.step || 1);
      } catch (e) {
        console.error('Error parsing saved form data:', e);
      }
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('voltbridge-form', JSON.stringify({ ...formData, step }));
  }, [formData, step]);

  const handleInputChange = (field: keyof FormData, value: string | Date) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const isStep1Valid = () => {
    return formData.postcode && 
           formData.monthlySpend && 
           formData.contractStatus &&
           (formData.contractStatus === 'out-of-contract' || formData.contractEndDate);
  };

  const isStep2Valid = () => {
    return formData.firstName && 
           formData.lastName && 
           formData.email && 
           formData.whatsapp;
  };

  const handleSubmit = async () => {
    if (!isStep2Valid()) return;

    setIsSubmitting(true);
    
    const submitData = {
      postcode: formData.postcode,
      monthlySpend: formData.monthlySpend,
      contractStatus: formData.contractStatus,
      contractEndDate: formData.contractEndDate ? format(formData.contractEndDate, 'yyyy-MM-dd') : null,
      firstName: formData.firstName,
      lastName: formData.lastName,
      email: formData.email,
      whatsapp: formData.whatsapp,
      timestamp: new Date().toISOString()
    };

    try {
      const response = await fetch('https://hook.eu2.make.com/2w143fc0jof3fif1eprw3buotoqdpgjh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submitData),
      });

      if (response.ok) {
        setIsSuccess(true);
        // Clear form data after successful submission
        const resetData = {
          postcode: "",
          monthlySpend: "",
          contractStatus: "",
          firstName: "",
          lastName: "",
          email: "",
          whatsapp: ""
        };
        setFormData(resetData);
        setStep(1);
        localStorage.removeItem('voltbridge-form');
        
        toast({
          title: "Thank you!",
          description: "We'll reach out via WhatsApp or email shortly.",
        });
      } else {
        throw new Error('Submission failed');
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to submit form. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSuccess) {
    return (
      <section id="quote-form" className="py-20 bg-surface">
        <div className="section-container">
          <motion.div 
            className="max-w-2xl mx-auto py-16 px-4 sm:px-6 lg:px-8 text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-green-500/10 mb-6">
              <CheckCircle className="w-12 h-12 text-green-500" />
            </div>
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">Thank You!</h2>
            <p className="text-lg text-white/80 mb-8 max-w-lg mx-auto">
              Your information has been submitted successfully. Our energy experts will contact you shortly with your personalized quote.
            </p>
            <Button 
              onClick={() => setIsSuccess(false)}
              className="bg-gradient-to-r from-vb-electric-1 to-vb-electric-2 hover:opacity-90 text-white font-semibold py-6 px-8 rounded-xl transition-all duration-300 group"
            >
              Submit Another Request
              <ChevronRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
            </Button>
          </motion.div>
        </div>
      </section>
    );
  }

  return (
    <section id="quote-form" className="py-20 bg-surface">
      <div className="section-container">
        <div className="max-w-5xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center mb-12"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.6 }}
          >
            <span className="inline-block px-4 py-2 text-sm font-medium text-vb-electric-1 bg-vb-electric-1/10 rounded-full border border-vb-electric-1/30 mb-4">
              Get Your Quote
            </span>
            <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6">
              Start <span className="bg-gradient-to-r from-vb-electric-1 to-vb-electric-2 bg-clip-text text-transparent">Saving Today</span>
            </h2>
            <p className="text-xl text-white/80 max-w-3xl mx-auto">
              Complete the form below and we'll find you the best energy deal in just 2 minutes.
            </p>
            
            <div className="flex justify-center mt-12 mb-6">
              <div className="flex items-center">
                <div className={`flex items-center justify-center w-12 h-12 rounded-full text-lg font-semibold transition-all duration-300 ${
                  step >= 1 
                    ? 'bg-gradient-to-br from-vb-electric-1 to-vb-electric-2 text-white shadow-lg shadow-vb-electric-1/30' 
                    : 'bg-vb-dark-3 text-white/40 border border-white/10'
                }`}>
                  1
                </div>
                <div className={`w-32 h-1 transition-all duration-500 ${
                  step >= 2 
                    ? 'bg-gradient-to-r from-vb-electric-1 to-vb-electric-2' 
                    : 'bg-vb-dark-3'
                }`}></div>
                <div className={`flex items-center justify-center w-12 h-12 rounded-full text-lg font-semibold transition-all duration-300 ${
                  step >= 2 
                    ? 'bg-gradient-to-br from-vb-electric-1 to-vb-electric-2 text-white shadow-lg shadow-vb-electric-1/30' 
                    : 'bg-vb-dark-3 text-white/40 border border-white/10'
                }`}>
                  2
                </div>
              </div>
            </div>
          </motion.div>

          <div className="mb-6">
            <p className="text-sm text-muted-foreground">
              Step {step} of 2
            </p>
          </div>

          <div className="bg-vb-dark-2/50 backdrop-blur-sm rounded-2xl border border-white/5 shadow-xl overflow-hidden">
            <div className="p-8 md:p-10">
              <AnimatePresence mode="wait">
                {step === 1 ? (
                  <motion.div 
                    key="step1"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={formTransition}
                    className="space-y-8"
                  >
                    <motion.div variants={itemVariants}>
                      <Label htmlFor="postcode" className="block text-sm font-medium text-white/80 mb-2">
                        Your Postcode
                      </Label>
                      <Input
                        id="postcode"
                        type="text"
                        value={formData.postcode}
                        onChange={(e) => handleInputChange('postcode', e.target.value)}
                        placeholder="e.g. SW1A 1AA"
                        className="w-full bg-vb-dark-3/50 border-white/10 text-white placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                        autoFocus
                      />
                    </motion.div>

                    <motion.div variants={itemVariants}>
                      <Label htmlFor="monthlySpend" className="block text-sm font-medium text-white/80 mb-2">
                        Your current monthly energy spend (£)
                      </Label>
                      <div className="relative">
                        <span className="absolute left-4 top-1/2 -translate-y-1/2 text-white/70">£</span>
                        <Input
                          id="monthlySpend"
                          type="number"
                          value={formData.monthlySpend}
                          onChange={(e) => handleInputChange('monthlySpend', e.target.value)}
                          placeholder="e.g. 150"
                          className="w-full bg-vb-dark-3/50 border-white/10 text-white pl-10 placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                        />
                      </div>
                      <p className="mt-2 text-sm text-white/60">Enter your approximate monthly energy bill amount</p>
                    </motion.div>

                    <motion.div variants={itemVariants}>
                      <Label className="block text-sm font-medium text-white/80 mb-3">
                        Your current contract status
                      </Label>
                      <RadioGroup 
                        value={formData.contractStatus} 
                        onValueChange={(value) => handleInputChange('contractStatus', value)}
                        className="space-y-3"
                      >
                        {[
                          { id: 'out-of-contract', label: 'Out of contract' },
                          { id: 'in-contract', label: 'In contract (ending soon)' }
                        ].map((option) => (
                          <div key={option.id} className="flex items-center space-x-2 group">
                            <div className={`flex items-center justify-center w-5 h-5 rounded-full border-2 transition-colors ${
                              formData.contractStatus === option.id 
                                ? 'border-vb-electric-1 bg-vb-electric-1' 
                                : 'border-white/30 group-hover:border-vb-electric-1/70'
                            }`}>
                              {formData.contractStatus === option.id && (
                                <div className="w-2 h-2 rounded-full bg-white"></div>
                              )}
                            </div>
                            <Label htmlFor={option.id} className="cursor-pointer text-white/90 font-normal">
                              {option.label}
                            </Label>
                            <input 
                              type="radio" 
                              id={option.id}
                              value={option.id}
                              checked={formData.contractStatus === option.id}
                              onChange={() => {}}
                              className="sr-only"
                            />
                          </div>
                        ))}
                      </RadioGroup>
                    </motion.div>

                    <AnimatePresence>
                      {formData.contractStatus === 'in-contract' && (
                        <motion.div 
                          initial={{ opacity: 0, height: 0, marginTop: 0 }}
                          animate={{ opacity: 1, height: 'auto', marginTop: '1.5rem' }}
                          exit={{ opacity: 0, height: 0, marginTop: 0 }}
                          transition={{ duration: 0.3 }}
                          className="overflow-hidden"
                        >
                          <Label htmlFor="contractEndDate" className="block text-sm font-medium text-white/80 mb-2">
                            Contract end date
                          </Label>
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant={"outline"}
                                className={cn(
                                  "w-full justify-start text-left font-normal h-14 px-5 bg-vb-dark-3/50 border-white/10 text-white hover:bg-vb-dark-3/70 hover:border-vb-electric-1/30 hover:text-white",
                                  !formData.contractEndDate && "text-white/40"
                                )}
                              >
                                <CalendarIcon className="mr-3 h-5 w-5 text-vb-electric-1" />
                                {formData.contractEndDate ? (
                                  format(formData.contractEndDate, "PPP")
                                ) : (
                                  <span>Select your contract end date</span>
                                )}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0 border-vb-dark-3 bg-vb-dark-2 text-white" align="start">
                              <Calendar
                                mode="single"
                                selected={formData.contractEndDate}
                                onSelect={(date) => date && handleInputChange('contractEndDate', date)}
                                initialFocus
                                disabled={(date) => date < new Date()}
                                className="bg-vb-dark-2 border-vb-dark-3"
                                classNames={{
                                  day_selected: "bg-vb-electric-1 text-white hover:bg-vb-electric-1/90",
                                  day_today: "border border-vb-electric-1/50",
                                }}
                              />
                            </PopoverContent>
                          </Popover>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    <motion.div variants={itemVariants} className="pt-4">
                      <Button 
                        onClick={() => setStep(2)}
                        disabled={!isStep1Valid()}
                        className="w-full h-14 text-base font-semibold bg-gradient-to-r from-vb-electric-1 to-vb-electric-2 hover:opacity-90 text-white rounded-xl transition-all duration-300 flex items-center justify-center group"
                      >
                        Continue to Step 2
                        <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                      </Button>
                    </motion.div>
                  </motion.div>
                ) : (
                  <motion.div
                    key="step2"
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={formTransition}
                    className="space-y-6"
                  >
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <motion.div variants={itemVariants}>
                        <Label htmlFor="firstName" className="block text-sm font-medium text-white/80 mb-2">
                          First Name
                        </Label>
                        <Input
                          id="firstName"
                          type="text"
                          value={formData.firstName}
                          onChange={(e) => handleInputChange('firstName', e.target.value)}
                          placeholder="John"
                          className="w-full bg-vb-dark-3/50 border-white/10 text-white placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                        />
                      </motion.div>

                      <motion.div variants={itemVariants}>
                        <Label htmlFor="lastName" className="block text-sm font-medium text-white/80 mb-2">
                          Last Name
                        </Label>
                        <Input
                          id="lastName"
                          type="text"
                          value={formData.lastName}
                          onChange={(e) => handleInputChange('lastName', e.target.value)}
                          placeholder="Doe"
                          className="w-full bg-vb-dark-3/50 border-white/10 text-white placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                        />
                      </motion.div>
                    </div>

                    <motion.div variants={itemVariants}>
                      <Label htmlFor="email" className="block text-sm font-medium text-white/80 mb-2">
                        Email Address
                      </Label>
                      <Input
                        id="email"
                        type="email"
                        value={formData.email}
                        onChange={(e) => handleInputChange('email', e.target.value)}
                        placeholder="you@example.com"
                        className="w-full bg-vb-dark-3/50 border-white/10 text-white placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                      />
                    </motion.div>

                    <motion.div variants={itemVariants}>
                      <Label htmlFor="whatsapp" className="block text-sm font-medium text-white/80 mb-2">
                        WhatsApp Number
                      </Label>
                      <div className="relative">
                        <span className="absolute left-4 top-1/2 -translate-y-1/2 text-white/70">+44</span>
                        <Input
                          id="whatsapp"
                          type="tel"
                          value={formData.whatsapp}
                          onChange={(e) => handleInputChange('whatsapp', e.target.value)}
                          placeholder="7123 456 789"
                          className="w-full bg-vb-dark-3/50 border-white/10 text-white pl-16 placeholder:text-white/40 h-14 px-5 text-base focus:ring-2 focus:ring-vb-electric-1/50 focus:border-vb-electric-1/30"
                        />
                      </div>
                    </motion.div>

                    <motion.div variants={itemVariants} className="pt-2 flex flex-col sm:flex-row gap-4">
                      <Button 
                        variant="outline" 
                        onClick={() => setStep(1)}
                        className="h-14 text-base font-medium border-white/10 bg-vb-dark-3/50 hover:bg-vb-dark-3/70 hover:border-vb-electric-1/30 text-white flex items-center justify-center"
                      >
                        <ArrowLeft className="mr-2 h-5 w-5" />
                        Back
                      </Button>
                      <Button 
                        onClick={handleSubmit}
                        disabled={isSubmitting || !isStep2Valid()}
                        className="h-14 text-base font-semibold bg-gradient-to-r from-vb-electric-1 to-vb-electric-2 hover:opacity-90 text-white rounded-xl transition-all duration-300 flex-1 flex items-center justify-center group"
                      >
                        {isSubmitting ? (
                          <>
                            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                            Processing...
                          </>
                        ) : (
                          <>
                            Get My Free Quote
                            <Zap className="ml-2 h-5 w-5 group-hover:animate-pulse" />
                          </>
                        )}
                      </Button>
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
            
            <div className="bg-vb-dark-3/50 p-6 border-t border-white/5">
              <div className="flex flex-col md:flex-row items-center justify-between gap-4">
                <div className="flex items-center">
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-vb-electric-1/10 mr-3">
                    <Lock className="w-5 h-5 text-vb-electric-1" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-white">Your data is secure</p>
                    <p className="text-xs text-white/60">We'll never share your information</p>
                  </div>
                </div>
                <div className="flex items-center">
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-vb-electric-1/10 mr-3">
                    <ShieldCheck className="w-5 h-5 text-vb-electric-1" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-white">GDPR Compliant</p>
                    <p className="text-xs text-white/60">Your privacy is our priority</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactForm;
